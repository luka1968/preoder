#!/usr/bin/env node

/**
 * GitHub ‰∏ä‰º†ÂâçÂÆâÂÖ®Ê£ÄÊü•ËÑöÊú¨
 * Á°Æ‰øùÊïèÊÑü‰ø°ÊÅØ‰∏ç‰ºöË¢´ÊÑèÂ§ñÊèê‰∫§Âà∞‰ª£Á†Å‰ªìÂ∫ì
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// ÊïèÊÑü‰ø°ÊÅØÊ®°ÂºèÂàóË°®
const SENSITIVE_PATTERNS = [
  // Stripe keys
  /sk_live_[a-zA-Z0-9]+/g,
  /pk_live_[a-zA-Z0-9]+/g,
  /sk_test_[a-zA-Z0-9]+/g,
  /pk_test_[a-zA-Z0-9]+/g,
  
  // Brevo/Sendinblue keys
  /xkeysib-[a-zA-Z0-9\-]{50,}/g,
  
  // JWT tokens (ÈïøÂ∫¶Ê£ÄÊü•ÔºåÈÅøÂÖçËØØÊä•)
  /eyJ[a-zA-Z0-9\-_]{100,}/g,
  
  // Supabase URLsÂíåkeys
  /https:\/\/[a-z0-9]{20}\.supabase\.co/g,
  /sb-[a-z0-9]{20}-[a-zA-Z0-9]{40}/g,
  
  // Shopify keys (32Â≠óÁ¨¶ÂçÅÂÖ≠ËøõÂà∂)
  /[a-f0-9]{32}(?![a-f0-9])/g,
  
  // ÈÄöÁî®APIÂØÜÈí•Ê®°Âºè
  /api[_-]?key["\s]*[:=]["\s]*[a-zA-Z0-9]{20,}/gi,
  /secret[_-]?key["\s]*[:=]["\s]*[a-zA-Z0-9]{20,}/gi,
  /access[_-]?token["\s]*[:=]["\s]*[a-zA-Z0-9]{20,}/gi,
  
  // ÈÇÆÁÆ±Âú∞ÂùÄÔºàÂú®Á§∫‰æãÊñá‰ª∂‰∏≠ÂèØËÉΩÊòØÁúüÂÆûÁöÑÔºâ
  /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(?=.*example|.*\.example)/g,
  
  // ÂØÜÁ†ÅÊ®°Âºè
  /password["\s]*[:=]["\s]*[^"\s]{8,}/gi,
  /passwd["\s]*[:=]["\s]*[^"\s]{8,}/gi,
  
  // Êï∞ÊçÆÂ∫ìËøûÊé•Â≠óÁ¨¶‰∏≤
  /mongodb:\/\/[^\s"']+/g,
  /postgres:\/\/[^\s"']+/g,
  /mysql:\/\/[^\s"']+/g,
];

// ÈúÄË¶ÅÊ£ÄÊü•ÁöÑÊñá‰ª∂Êâ©Â±ïÂêç
const CHECK_EXTENSIONS = ['.js', '.ts', '.jsx', '.tsx', '.json', '.md', '.toml', '.env'];

// ÊéíÈô§ÁöÑÁõÆÂΩï
const EXCLUDE_DIRS = ['node_modules', '.git', '.next', 'build', 'dist', '.vercel'];

function getAllFiles(dir, files = []) {
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory() && !EXCLUDE_DIRS.includes(item)) {
      getAllFiles(fullPath, files);
    } else if (stat.isFile()) {
      const ext = path.extname(item);
      if (CHECK_EXTENSIONS.includes(ext)) {
        files.push(fullPath);
      }
    }
  }
  
  return files;
}

function checkFileForSensitiveData(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const violations = [];
    
    for (const pattern of SENSITIVE_PATTERNS) {
      const matches = content.match(pattern);
      if (matches) {
        violations.push({
          file: filePath,
          pattern: pattern.toString(),
          matches: matches.length
        });
      }
    }
    
    return violations;
  } catch (error) {
    console.warn(`‚ö†Ô∏è  Êó†Ê≥ïËØªÂèñÊñá‰ª∂: ${filePath}`);
    return [];
  }
}

function main() {
  console.log('üîç ÂºÄÂßãÂÆâÂÖ®Ê£ÄÊü•...\n');
  
  const projectRoot = process.cwd();
  const allFiles = getAllFiles(projectRoot);
  const allViolations = [];
  
  console.log(`üìÅ Ê£ÄÊü• ${allFiles.length} ‰∏™Êñá‰ª∂...\n`);
  
  for (const file of allFiles) {
    const violations = checkFileForSensitiveData(file);
    allViolations.push(...violations);
  }
  
  if (allViolations.length > 0) {
    console.log('‚ùå ÂèëÁé∞ÊïèÊÑü‰ø°ÊÅØÊ≥ÑÈú≤ÔºÅ');
    console.log('=====================================\n');
    
    for (const violation of allViolations) {
      console.log(`üö® Êñá‰ª∂: ${violation.file}`);
      console.log(`   Ê®°Âºè: ${violation.pattern}`);
      console.log(`   ÂåπÈÖç: ${violation.matches} Ê¨°\n`);
    }
    
    console.log('üõ°Ô∏è  ËØ∑Âú®‰∏ä‰º†Âà∞ GitHub ÂâçÁßªÈô§Ëøô‰∫õÊïèÊÑü‰ø°ÊÅØÔºÅ');
    console.log('üí° Âª∫ËÆÆÊìç‰ΩúÔºö');
    console.log('   1. Â∞ÜÊïèÊÑü‰ø°ÊÅØÁßªÂä®Âà∞ .env.local Êñá‰ª∂');
    console.log('   2. ‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáèÊõøÊç¢Á°¨ÁºñÁ†ÅÁöÑÂÄº');
    console.log('   3. Á°Æ‰øù .env.local Âú® .gitignore ‰∏≠');
    console.log('   4. Âú® Vercel ‰∏≠ÈÖçÁΩÆÁéØÂ¢ÉÂèòÈáè\n');
    
    process.exit(1);
  } else {
    console.log('‚úÖ ÂÆâÂÖ®Ê£ÄÊü•ÈÄöËøáÔºÅ');
    console.log('üöÄ ‰ª£Á†ÅÂèØ‰ª•ÂÆâÂÖ®‰∏ä‰º†Âà∞ GitHub');
    
    // Ê£ÄÊü• .gitignore ÈÖçÁΩÆ
    const gitignorePath = path.join(projectRoot, '.gitignore');
    if (fs.existsSync(gitignorePath)) {
      const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
      const requiredEntries = ['.env*.local', '.env', '.env.production', '.env.deploy'];
      const missingEntries = requiredEntries.filter(entry => !gitignoreContent.includes(entry));
      
      if (missingEntries.length > 0) {
        console.log('\n‚ö†Ô∏è  .gitignore ÂèØËÉΩÁº∫Â∞ë‰ª•‰∏ãÊù°ÁõÆÔºö');
        missingEntries.forEach(entry => console.log(`   - ${entry}`));
      } else {
        console.log('‚úÖ .gitignore ÈÖçÁΩÆÊ≠£Á°Æ');
      }
    }
  }
}

if (require.main === module) {
  main();
}

module.exports = { checkFileForSensitiveData, SENSITIVE_PATTERNS };
